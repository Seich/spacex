{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","markers","setMarkers","focus","setFocus","useEffect","latitude","longitude","fetch","then","r","json","data","satellites","map","id","coordinates","color","value","push","className","options","focusDistanceRadiusScale","cameraAutoRotateSpeed","enableCameraAutoRotate","enableMarkerGlow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAoDeA,MA/Cf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEaF,qBAFb,mBAENG,EAFM,KAECC,EAFD,KAwCb,OApCAC,qBAAU,WACR,IAAMC,EAAW,WACXC,GAAa,YAGnBC,MAAM,yCAAD,OAFK,GAEL,qBACoDF,EADpD,sBAC0EC,IAE5EE,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACJ,IAAMC,EAAaD,EAAKE,KAAI,kBAAkC,CAC5DC,GAD0B,EAAGA,GAE7BC,YAAa,CAFa,EAAOV,SAAP,EAAiBC,WAG3CU,MAAO,MACPC,MAAO,MAGTL,EAAWM,KAAK,CACdJ,GAAI,SACJC,YAAa,CAACV,EAAUC,GACxBU,MAAO,SACPC,MAAO,IAGThB,EAAWW,GACXT,EAAS,CAACE,EAAUC,SAEvB,IAUD,qBAAKa,UAAU,MAAf,SACE,cAAC,IAAD,CAAYnB,QAASA,EAASE,MAAOA,EAAOkB,QAThC,CACdC,yBAA0B,EAC1BC,sBAAuB,EACvBC,wBAAwB,EACxBC,kBAAkB,QC9BPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bd58bab6.chunk.js","sourcesContent":["import './App.css'\n\nimport React, { useEffect, useState } from 'react'\nimport ReactGlobe from 'react-globe'\n\nfunction App() {\n  const [markers, setMarkers] = useState([])\n  const [focus, setFocus] = useState()\n\n  useEffect(() => {\n    const latitude = 47.1923146\n    const longitude = -114.0890228\n    const n = 30\n\n    fetch(\n      `http://localhost:4567/v1/satellites?n=${n}&latitude=${latitude}&longitude=${longitude}`\n    )\n      .then(r => r.json())\n      .then(data => {\n        const satellites = data.map(({ id, latitude, longitude }) => ({\n          id: id,\n          coordinates: [latitude, longitude],\n          color: 'red',\n          value: 1\n        }))\n\n        satellites.push({\n          id: 'origin',\n          coordinates: [latitude, longitude],\n          color: 'yellow',\n          value: 1\n        })\n\n        setMarkers(satellites)\n        setFocus([latitude, longitude])\n      })\n  }, [])\n\n  const options = {\n    focusDistanceRadiusScale: 3,\n    cameraAutoRotateSpeed: 0,\n    enableCameraAutoRotate: false,\n    enableMarkerGlow: false\n  }\n\n  return (\n    <div className=\"App\">\n      <ReactGlobe markers={markers} focus={focus} options={options} />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}